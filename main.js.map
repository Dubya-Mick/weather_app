{"version":3,"sources":["webpack://weather_app/./src/index.js"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS,eAAe;AACxB;AACA,gCAAgC,kBAAkB,IAAI,0BAA0B;AAChF;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,oGAAoG,SAAS;AAC7G,SAAS,eAAe;AACxB;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,0BAA0B,+BAA+B;AACzD;AACA,2CAA2C,kCAAkC;AAC7E,gCAAgC,+BAA+B;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,4BAA4B,IAAI,8BAA8B;AAC/F,KAAK;AACL,iCAAiC,4BAA4B,IAAI,+BAA+B;AAChG;;AAEA;AACA;AACA,oDAAoD,oCAAoC;AACxF,KAAK;AACL,oDAAoD,oCAAoC;AACxF;AACA;;AAEA;AACA;AACA;AACA;AACA,4BAA4B,+BAA+B;AAC3D,6CAA6C,kCAAkC;AAC/E;AACA;AACA;AACA,KAAK;AACL,4BAA4B,+BAA+B;AAC3D,6CAA6C,kCAAkC;AAC/E;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD","file":"main.js","sourcesContent":["const weatherFetcher = (() => {\n  const currentCityWeatherData = {};\n  let farenheit = false;\n  const weatherDescription = document.getElementById('weather-description');\n  const feelsLike = document.getElementById('feels-like');\n  const wind = document.getElementById('wind');\n  const precipChance = document.getElementById('precip-chance');\n  const temp = document.getElementById('temperature');\n  const cityTitle = document.getElementById('city-title');\n  const loadingSpinner = document.querySelector('.spinner');\n\n  const searchForCity = () => {\n    const chosenCity = document.getElementById('city-search').value;\n    grabWeather(chosenCity);\n  };\n\n  const grabUserWeather = async () => {\n    try {\n      loadingSpinner.style.display = 'block';\n      const rawLocationData = await fetch('https://ipapi.co/json/',\n        { mode: 'cors' });\n      const locationData = await rawLocationData.json();\n      const cityAndCountry = `${locationData.city}, ${locationData.country_name}`;\n      grabWeather(cityAndCountry);\n    } catch {\n      displayErrorToast('Sorry, no weather data found based on your location. Please try a city in the search bar.');\n    }\n  };\n\n  const grabWeather = async (location) => {\n    try {\n      loadingSpinner.style.display = 'block';\n      const rawWeatherData = await fetch(\n        `https://api.weatherapi.com/v1/forecast.json?key=ec082002a81e415bae0115044210804&days=7&q=${location}`,\n        { mode: 'cors' },\n      );\n      const weatherData = await rawWeatherData.json();\n      processWeatherData(weatherData);\n      loadingSpinner.style.display = 'none';\n      displayWeather();\n    } catch {\n      loadingSpinner.style.display = 'none';\n      displayErrorToast('Sorry, no weather data found. Try another search.');\n    }\n  };\n\n  const processWeatherData = (data) => {\n    // add properties to currentCityWeatherData object containing only the info we need\n    currentCityWeatherData.tempInC = data.current.temp_c.toFixed(0);\n    currentCityWeatherData.tempInF = data.current.temp_f.toFixed(0);\n    currentCityWeatherData.feelsLikeC = data.current.feelslike_c.toFixed(0);\n    currentCityWeatherData.feelsLikeF = data.current.feelslike_f.toFixed(0);\n    currentCityWeatherData.windKPH = data.current.wind_kph.toFixed(0);\n    currentCityWeatherData.windMPH = data.current.wind_mph.toFixed(0);\n    currentCityWeatherData.chanceOfRain = data.forecast.forecastday[0].day.daily_chance_of_rain;\n    currentCityWeatherData.chanceOfSnow = data.forecast.forecastday[0].day.daily_chance_of_snow;\n    currentCityWeatherData.currentCondition = data.current.condition.text;\n    currentCityWeatherData.dailyForecast = data.forecast.forecastday[0].day.condition.text;\n    currentCityWeatherData.city = data.location.name;\n    currentCityWeatherData.country = data.location.country;\n    currentCityWeatherData.region = data.location.region;\n    currentCityWeatherData.isDay = data.current.is_day;\n  };\n\n  const displayWeather = () => {\n    temp.textContent = `${currentCityWeatherData.tempInC}\\u00B0`;\n    weatherDescription.textContent = currentCityWeatherData.currentCondition;\n    feelsLike.textContent = `Feels like: ${currentCityWeatherData.feelsLikeC}\\u00B0`;\n    wind.textContent = `Wind: ${currentCityWeatherData.windKPH} kph`;\n\n    // change background image depending on night vs day and weather description\n    const description = currentCityWeatherData.currentCondition;\n    const clearRegex = /sunny|clear/gi;\n    const partlyCloudyRegex = /partly/gi;\n    const overcastRainSnowRegex = /cloudy|overcast|rain|drizzle|snow|ice|sleet|blizzard|fog/gi;\n    if (currentCityWeatherData.isDay === 0 && clearRegex.test(description)) {\n      document.documentElement.style.setProperty('--image-url', 'url(../dist/images/clear-night-sky.jpeg)');\n      document.body.style.color = 'white';\n    } else if (currentCityWeatherData === 0 && overcastRainSnowRegex.test(description)) {\n      document.documentElement.style.setProperty('--image-url', 'url(../dist/images/clouds-night.jpeg)');\n      document.body.style.color = 'white';\n    } else if (clearRegex.test(description)) {\n      document.documentElement.style.setProperty('--image-url', 'url(../dist/images/clear-day.jpeg)');\n      document.body.style.color = 'white';\n    } else if (partlyCloudyRegex.test(description)) {\n      document.documentElement.style.setProperty('--image-url', 'url(../dist/images/partly-cloudy-day.jpeg)');\n      document.body.style.color = 'black';\n    } else {\n      document.documentElement.style.setProperty('--image-url', 'url(../dist/images/overcast-day.jpeg)');\n      document.body.style.color = 'black';\n    }\n\n    // if city is in the US, display state name\n    if (currentCityWeatherData.country === 'United States of America') {\n      cityTitle.textContent = `${currentCityWeatherData.city}, ${currentCityWeatherData.region}`;\n    } else {\n      cityTitle.textContent = `${currentCityWeatherData.city}, ${currentCityWeatherData.country}`;\n    }\n\n    // if chance of snow is greater than/equal to 1, display chance of snow instead of rain\n    if (parseInt(currentCityWeatherData.chanceOfSnow) > parseInt(currentCityWeatherData.chanceOfRain)) {\n      precipChance.textContent = `Chance of Snow: ${currentCityWeatherData.chanceOfSnow}%`;\n    } else {\n      precipChance.textContent = `Chance of Rain: ${currentCityWeatherData.chanceOfRain}%`;\n    }\n  };\n\n  const toggleTempUnits = () => {\n    const f = document.getElementById('f');\n    const c = document.getElementById('c');\n    if (farenheit) {\n      temp.textContent = `${currentCityWeatherData.tempInC}\\u00B0`;\n      feelsLike.textContent = `Feels like: ${currentCityWeatherData.feelsLikeC}\\u00B0`;\n      f.classList.toggle('faded');\n      c.classList.toggle('faded');\n      farenheit = false;\n    } else {\n      temp.textContent = `${currentCityWeatherData.tempInF}\\u00B0`;\n      feelsLike.textContent = `Feels like: ${currentCityWeatherData.feelsLikeF}\\u00B0`;\n      f.classList.toggle('faded');\n      c.classList.toggle('faded');\n      farenheit = true;\n    }\n  };\n\n  const displayErrorToast = (errorMessage) => {\n    const toast = document.querySelector('.toast');\n    toast.textContent = errorMessage;\n    toast.classList.add('show-toast');\n    setTimeout(() => toast.classList.remove('show-toast'), 3000);\n  };\n\n  const activateSearch = () => {\n    document.getElementById('search-button').addEventListener('click', searchForCity);\n  };\n\n  const activateTempToggle = () => {\n    document.getElementById('unit-button').addEventListener('click', toggleTempUnits);\n  };\n\n  const init = () => {\n    activateSearch();\n    activateTempToggle();\n    grabUserWeather();\n  };\n\n  return {\n    init,\n  };\n})();\nweatherFetcher.init();\n"],"sourceRoot":""}